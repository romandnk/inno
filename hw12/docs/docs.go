// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/admin/get_user_info": {
            "get": {
                "description": "Allows an admin to retrieve the full information of any user by user ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Get Full User Information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID to fetch full information for",
                        "name": "user_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved full user information",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/httphandler.HTTPResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/domain.User"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid user ID format",
                        "schema": {
                            "$ref": "#/definitions/httphandler.HTTPResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/httphandler.HTTPResponse"
                        }
                    }
                }
            }
        },
        "/admin/reset_user_password": {
            "post": {
                "description": "Allows an admin to reset a user's password and retrieve the new password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Reset User Password",
                "parameters": [
                    {
                        "description": "User password reset request",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/httphandler.ResetUserPasswordReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully reset the user's password",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/httphandler.HTTPResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/httphandler.HTTPResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/httphandler.HTTPResponse"
                        }
                    },
                    "405": {
                        "description": "Method not allowed",
                        "schema": {
                            "$ref": "#/definitions/httphandler.HTTPResponse"
                        }
                    },
                    "422": {
                        "description": "Request body validation error",
                        "schema": {
                            "$ref": "#/definitions/httphandler.HTTPResponse"
                        }
                    }
                }
            }
        },
        "/admin/set_user_block_status": {
            "post": {
                "description": "Allows an admin to block or unblock a user by setting the user's block status.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Set User Block/Unblock Status",
                "parameters": [
                    {
                        "description": "User block/unblock status request",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/httphandler.SetUserBlockStatusReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully changed the user's block status",
                        "schema": {
                            "$ref": "#/definitions/httphandler.HTTPResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/httphandler.HTTPResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/httphandler.HTTPResponse"
                        }
                    },
                    "405": {
                        "description": "Method not allowed",
                        "schema": {
                            "$ref": "#/definitions/httphandler.HTTPResponse"
                        }
                    },
                    "409": {
                        "description": "User already in desired block/unblock status",
                        "schema": {
                            "$ref": "#/definitions/httphandler.HTTPResponse"
                        }
                    },
                    "422": {
                        "description": "Request body validation error",
                        "schema": {
                            "$ref": "#/definitions/httphandler.HTTPResponse"
                        }
                    }
                }
            }
        },
        "/admin/set_user_role": {
            "post": {
                "description": "Allows an admin to set the role of a user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Set User Role",
                "parameters": [
                    {
                        "description": "User role change request",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/httphandler.SetUserRoleReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully changed the user's role",
                        "schema": {
                            "$ref": "#/definitions/httphandler.HTTPResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/httphandler.HTTPResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/httphandler.HTTPResponse"
                        }
                    },
                    "405": {
                        "description": "Method not allowed",
                        "schema": {
                            "$ref": "#/definitions/httphandler.HTTPResponse"
                        }
                    },
                    "409": {
                        "description": "User already has the specified role",
                        "schema": {
                            "$ref": "#/definitions/httphandler.HTTPResponse"
                        }
                    },
                    "422": {
                        "description": "Request body validation error",
                        "schema": {
                            "$ref": "#/definitions/httphandler.HTTPResponse"
                        }
                    }
                }
            }
        },
        "/change_psw": {
            "put": {
                "description": "Changes the user's password based on the provided user ID and new password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Change User Password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "User-ID",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "New password information",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/httphandler.ChangePswReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password successfully changed",
                        "schema": {
                            "$ref": "#/definitions/httphandler.HTTPResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/httphandler.HTTPResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/httphandler.HTTPResponse"
                        }
                    },
                    "422": {
                        "description": "Request body validation error",
                        "schema": {
                            "$ref": "#/definitions/httphandler.HTTPResponse"
                        }
                    }
                }
            }
        },
        "/get_user_info": {
            "get": {
                "description": "Retrieves short information about a user based on the provided user ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get User Information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "User-ID",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user information",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/httphandler.HTTPResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/domain.UserInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/httphandler.HTTPResponse"
                        }
                    }
                }
            }
        },
        "/set_user_info": {
            "put": {
                "description": "Updates user information such as name based on the provided user ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Update User Information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "User-ID",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "User information to update",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/httphandler.SetUserInfoReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated user information",
                        "schema": {
                            "$ref": "#/definitions/httphandler.HTTPResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/httphandler.HTTPResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/httphandler.HTTPResponse"
                        }
                    },
                    "422": {
                        "description": "Request body validation error",
                        "schema": {
                            "$ref": "#/definitions/httphandler.HTTPResponse"
                        }
                    }
                }
            }
        },
        "/sign_in": {
            "post": {
                "description": "Authenticates a user using login and password, returning a JWT token upon success.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "User Login",
                "parameters": [
                    {
                        "description": "User login and password",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.LoginPassword"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful login, JWT token",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/httphandler.HTTPResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/domain.UserToken"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid login or password",
                        "schema": {
                            "$ref": "#/definitions/httphandler.HTTPResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/httphandler.HTTPResponse"
                        }
                    },
                    "422": {
                        "description": "Request body validation error",
                        "schema": {
                            "$ref": "#/definitions/httphandler.HTTPResponse"
                        }
                    }
                }
            }
        },
        "/sign_up": {
            "post": {
                "description": "Creates a new user account with a login and password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "User Registration",
                "parameters": [
                    {
                        "description": "User login and password",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.LoginPassword"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful registration, JWT token",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/httphandler.HTTPResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/domain.UserToken"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid registration data",
                        "schema": {
                            "$ref": "#/definitions/httphandler.HTTPResponse"
                        }
                    },
                    "409": {
                        "description": "User input data error",
                        "schema": {
                            "$ref": "#/definitions/httphandler.HTTPResponse"
                        }
                    },
                    "422": {
                        "description": "Request body validation error",
                        "schema": {
                            "$ref": "#/definitions/httphandler.HTTPResponse"
                        }
                    }
                }
            }
        },
        "/v2/get_user_info": {
            "get": {
                "description": "Retrieves user information based on the role of the requesting user. Admins can get full info for any user, while regular users can only access their own short info.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get User Information (Version 2)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID to fetch information for",
                        "name": "user_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Author User ID (the requester)",
                        "name": "User-ID",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Short information for regular users",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/httphandler.HTTPResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/domain.UserInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid user ID format",
                        "schema": {
                            "$ref": "#/definitions/httphandler.HTTPResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden: Regular user cannot access other user's info",
                        "schema": {
                            "$ref": "#/definitions/httphandler.HTTPResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/httphandler.HTTPResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httphandler.HTTPResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.LoginPassword": {
            "type": "object",
            "properties": {
                "login": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "domain.User": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "is_blocked": {
                    "type": "boolean"
                },
                "login": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "domain.UserInfo": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "domain.UserToken": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "httphandler.ChangePswReq": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                }
            }
        },
        "httphandler.HTTPResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "httphandler.ResetUserPasswordReq": {
            "type": "object",
            "properties": {
                "user_id": {
                    "type": "string"
                }
            }
        },
        "httphandler.SetUserBlockStatusReq": {
            "type": "object",
            "properties": {
                "set_block_status": {
                    "type": "boolean"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "httphandler.SetUserInfoReq": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "httphandler.SetUserRoleReq": {
            "type": "object",
            "properties": {
                "role": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Auth service API",
	Description:      "This is an auth service.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
